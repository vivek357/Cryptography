MAC: Message Authentication Code
--------------------------------
	
	
	A  <-----------------> B (share a key)

	f : {0,1} ^ 768  --->  {0,1} ^ 256 

	|b| = 256, 512 ...		M = y0y1y2y3....

	|IV| = 256	IV || y0 --> f1
			IV || y1 --> f2
			IV || y2 --> f3
				.
				.	
				.

	MAC = C(k,M)     where k = key,  M = message, MAC = Digital Checksum

	which will give only Authentication and intergrity (No Confidentiality)
	This Hash based MAC is termed as HMAC

	HMAC, a schema in which HASH FUNCTION is going to be used to produce the 	digital checksum or the MAC (NIST STD FIPS5198)

# H : Embedded Hash Function (e.g., MD5, SHA-3, RIPEMD160,...)

	(H --> IV,f) where 
		IV = Initial Vector,
		f = Compression Function,
		M = Message (including the pad)
		yi = ith block (M = y0y1y2...yl-1)
		l = Number of blocks in m
		b = block size   (for SHA b = 512, n = 256)
		n = output lenght of H
		k = secret key  |k| >= n

	ipad (inner pad)  0x36 in hex repeated b/8 times
		of size b (block size)

		==> b/8 copies ==> |ipad| = b
			e.g., 256/8 = 32 is b = 256

	opad (outer pad) 0x5c in Hex, b/8 times repeated


	k+ = is the k padded to its left with zeroes so that |k+| = b

Algorithm:
#############


1.  find (k+ XOR ipad) and get Si  (starting block of inner call)
	=> Si = (k+ XOR ipad)

2.  Append M to Si ; i.e., stream of data Msg M to SHA256 Block Size for our eg
3.  Apply H to the data stream generated of step 2

4.  S0 = k+ XOR opad (starting block of outer call) 
5.  Apply H to compute H [S0 || h] and output the result.

	
	MAC = H [ (k+ XOR opad ) || H [ K+ || ipad || M ] ]
	      outer Hash	    inner Hash
		
	

